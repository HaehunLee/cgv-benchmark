package kr.co.hta.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.co.hta.movies.dao.MemberDao;
import kr.co.hta.movies.dao.MovieDao;
import kr.co.hta.movies.dao.ReviewDao;
import kr.co.hta.util.CommonUtils;
import kr.co.hta.vo.FivePoint;
import kr.co.hta.vo.Member;
import kr.co.hta.vo.Movie;
import kr.co.hta.vo.Review;
import kr.co.hta.vo.WishList;
import kr.co.jhta.mvc.annotation.Controller;
import kr.co.jhta.mvc.annotation.RequestMapping;
import kr.co.jhta.mvc.servlet.ModelAndView;
import kr.co.jhta.mvc.view.JSONView;

@Controller
public class GPAController {
	
	private MovieDao movieDao = new MovieDao();
	private ReviewDao reviewDao = new ReviewDao();
	private MemberDao memberDao = new MemberDao();
	
	@RequestMapping("/movie/ajaxReviews.jf")
	public ModelAndView reviews(HttpServletRequest req, HttpServletResponse res) throws Exception {
		ModelAndView mav = new ModelAndView();
		Movie rank1movie = movieDao.getRank1MovieByGPA();
		
		int mno = CommonUtils.stringToNumber(req.getParameter("mno"), rank1movie.getNo());
		int rno = CommonUtils.stringToNumber(req.getParameter("rno"), 1);
		
		int begin = (rno-1)*8 +1;
		int end = rno*8;
		
		Map<String,Integer> map = new HashMap<String, Integer>();
		map.put("begin", begin);
		map.put("end",end);
		map.put("movieNo", mno);
		List<Review> reviews = reviewDao.getReviewsByRangeAndMovie(map);
		mav.addAttribute("reviews", reviews);
		mav.setView(new JSONView());
		return mav;
	}
	
	@RequestMapping("/movie/gpa.jf")
	public ModelAndView a(HttpServletRequest req, HttpServletResponse res) throws Exception{
		
		ModelAndView mav = new ModelAndView();
		mav.setViewName("semi/gpa/gpa.jsp");
		
		Movie rank1movie = movieDao.getRank1MovieByGPA();
		int mno = CommonUtils.stringToNumber(req.getParameter("mno"), rank1movie.getNo());
		int rno = CommonUtils.stringToNumber(req.getParameter("rno"), 1);
		
		Movie movie = movieDao.getMovieByNo(mno);
		
		if(movie == null) {
			movie = movieDao.getMovieByNo(rank1movie.getNo());
		}
		
		String info = movie.getInfo();
		info = info.replace("\r\n", "<br>");
		movie.setInfo(info);
		int reviewsCountByMovie = reviewDao.getReviewsCountByMovie(mno);
	// 리뷰 얻어오기 시작
		List<Movie> movies = movieDao.setlect4MoviesRankByGpa();
		
		int begin = (rno-1)*8 +1;
		int end = rno*8;
		int totalreviewsCount = (int)Math.ceil((double)reviewsCountByMovie/8);
		Map<String,Integer> map = new HashMap<String, Integer>();
		map.put("begin", begin);
		map.put("end",end);
		map.put("movieNo", mno);
		List<Review> reviews = reviewDao.getReviewsByRangeAndMovie(map);
	//	리뷰 얻어오기 끝
	// Review 하트 빨간색 기능 시작
		HttpSession session = req.getSession();
		Member member = (Member) session.getAttribute("LOGINMEMBER");
		String heart = "";
		
		if(member !=null) {
			List<WishList> wishLists = memberDao.getWishListById(member.getId());
			mav.addAttribute("wishLists", wishLists);
		}
	// Review 하트 기능 끝
	// 그래프 표시 기능 시작
		FivePoint fivePoint = reviewDao.getFivePointByMovieNo(mno);
	// 그래프 표시 기능 끝
	// GPACommon에 표시 시작
	// GPACommon에 표시 끝
	// 일반평점, 내가 쓴 평점 빨간색 표시 시작
		int toggleNo = CommonUtils.stringToNumber("toggleNo", 1);
		mav.addAttribute("toggleNo", toggleNo);
	// 평점 빨간색 끝
		mav.addAttribute("reviews", reviews);
		mav.addAttribute("movies", movies);
		mav.addAttribute("currentMovie", movie);
		mav.addAttribute("totalreviewsCount", totalreviewsCount);
		mav.addAttribute("reviewsCountByMovie", reviewsCountByMovie);
		mav.addAttribute("rank1movie", rank1movie.getNo());
		mav.addAttribute("heart", heart);
		mav.addAttribute("fivePoint", fivePoint);
		return mav;
	}
	
	@RequestMapping("/movie/addreview.jf")
	public ModelAndView addReview(HttpServletRequest req, HttpServletResponse res) throws Exception {
		ModelAndView mav = new ModelAndView();
		int mno = 0;
		int rno = 0;
		
		Movie rank1movie = movieDao.getRank1MovieByGPA();
		
		try {
			mno = Integer.parseInt(req.getParameter("mno"));
		} catch (Exception e) {
			mno = rank1movie.getNo();
		}
		try {
			rno = Integer.parseInt(req.getParameter("rno"));
		} catch (Exception e) {
			rno = 1;
		}
		mav.setViewName("redirect:gpa.jf?mno="+mno+"&rno="+rno);
		Movie movie = movieDao.getMovieByNo(mno);
		
		if(movie == null) {
			movie = movieDao.getMovieByNo(rank1movie.getNo());
		}
		
		int production = 0;
		try {
			production = Integer.parseInt(req.getParameter("production"));
		} catch (Exception e) {
			production = 0;
		}
		int story = 0;
		try {
			story= Integer.parseInt(req.getParameter("story"));
			
		} catch (Exception e) {
			story = 0;
		}
		int beauty = 0;
		try {
			beauty = Integer.parseInt(req.getParameter("beauty"));
		} catch (Exception e) {
			beauty = 0;
		}
		int actor = 0;
		try {
			actor = Integer.parseInt(req.getParameter("actor"));
		} catch (Exception e) {
			actor = 0;
		}
		int ost = 0;
		try {
			ost = Integer.parseInt(req.getParameter("ost"));
		} catch (Exception e) {
			ost = 0;
		}

		Review review = new Review();
		String rcomment = req.getParameter("review_contents");
		
		HttpSession session = req.getSession();
		Member member = (Member) session.getAttribute("LOGINMEMBER");
		if(member == null) {
			mav.setViewName("redirect:/jf/member/login.jf?result=please");
			return mav;
		}
		// 좋아요 인지? --> movieGpa,reviewGpa 추가
		int isLike = CommonUtils.stringToNumber(req.getParameter("like"), 1);
		if(isLike ==1) {
			review.setGpa(1);
			movie.setGpa(movie.getGpa()+1);
			movieDao.updateMovieByNo(movie);
		} else {
			review.setGpa(0);
		}
		// 좋아요 추가 끝
		
		String memberId = member.getId();
		
		review.setMovieNo(mno);
		review.setBeauty(beauty);
		review.setActor(actor);
		review.setMemberId(memberId);
		review.setProduction(production);
		review.setOst(ost);
		review.setStory(story);
		review.setRcomment(rcomment);
		reviewDao.insertReview(review);

		// 리뷰 갯수 카운트
		int reviewsCountByMovie =  reviewDao.getReviewsCountByMovie(mno);
		if(reviewsCountByMovie == 0) {
			reviewsCountByMovie = 1;
		}
		// 골든에그스코어 = 영화 Gpa 가져와서 
		double goldenEggScore = ((double)movie.getGpa() / (double)reviewsCountByMovie)*100;
		int newGoldenEggScore = (int)Math.round(goldenEggScore);
		
		movie.setGoldenEgg(newGoldenEggScore);
		movieDao.updateMovieByNo(movie);
		
		return mav;
	}
	@RequestMapping("/movie/updateReview.jf")
	public ModelAndView updateLikes(HttpServletRequest req, HttpServletResponse res) throws Exception {
		ModelAndView mav = new ModelAndView();
		
		Movie rank1movie = movieDao.getRank1MovieByGPA();
		int mno = 0;
		int rno = 0;
		try {
			mno = Integer.parseInt(req.getParameter("mno"));
		} catch (Exception e) {
			mno = rank1movie.getNo();
		}
		try {
			rno = Integer.parseInt(req.getParameter("rno"));
		} catch (Exception e) {
			rno = 1;
		}
		
		HttpSession session = req.getSession();
		Member member = (Member) session.getAttribute("LOGINMEMBER");
		
		if(member == null) {
			mav.setViewName("redirect:/jf/member/login.jf?result=likefail");
			return mav;
		}
		mav.setViewName("redirect:gpa.jf?mno="+mno+"&rno="+rno);
		int reviewNo = Integer.parseInt(req.getParameter("reviewNo"));
		Review review = reviewDao.getReviewByNo(reviewNo);
		review.setLikes(review.getLikes()+1);
		reviewDao.updateReview(review);
		return mav;
	}
	@RequestMapping("/member/process_removeReview.jf")
	public ModelAndView removeReview(HttpServletRequest req, HttpServletResponse res) throws Exception {
		ModelAndView mav = new ModelAndView();
		int rno = 0;
		try {
			rno =Integer.parseInt(req.getParameter("rno"));
		} catch (Exception e) {
			mav.setViewName("redirect:mymoviegpa.jf");
			return mav;
		}
		Review review = reviewDao.getReviewByNo(rno);
		int mno = review.getMovieNo();
		Movie movie = movieDao.getMovieByNo(mno);
		movie.setGpa(movie.getGpa()-1);
		movieDao.updateMovieByNo(movie);
		
		reviewDao.deleteReviewByNo(rno);
		mav.setViewName("redirect:mymoviegpa.jf");
		return mav;
	}
}
