package kr.co.hta.controller;


import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import kr.co.hta.movies.dao.MovieDao;
import kr.co.hta.movies.dao.ReservationDao;
import kr.co.hta.movies.dao.TheaterDao;
import kr.co.hta.vo.CityCount;
import kr.co.hta.vo.Member;
import kr.co.hta.vo.Movie;
import kr.co.hta.vo.Reservation;
import kr.co.hta.vo.Theater;
import kr.co.hta.vo.Ticketing;
import kr.co.jhta.mvc.annotation.Controller;
import kr.co.jhta.mvc.annotation.RequestMapping;
import kr.co.jhta.mvc.servlet.ModelAndView;
import kr.co.jhta.mvc.view.JSONView;

@Controller
public class ReservationController {
	
	MovieDao movieDao = new MovieDao();
	TheaterDao theaterDao = new TheaterDao();
	ReservationDao resDao = new ReservationDao();

	@RequestMapping("/reservation/reservation.jf")
	public ModelAndView reservation(HttpServletRequest req, HttpServletResponse res) throws Exception {
		
		int mno = 0;
		try {
			mno = Integer.parseInt(req.getParameter("mno"));
		} catch(Exception e) {
			mno = 1;
		}
		
		int sort = 0;
		try {
			sort = Integer.parseInt(req.getParameter("sort"));
		} catch(Exception e) {
			sort = 1;
		}
		
		Map<String, Integer> map = new HashMap<String, Integer>();
		map.put("sort", sort);
		
		ModelAndView mav = new ModelAndView();
		mav.setViewName("semi/reservation/reservation.jsp?mno=" + mno);
		
		List<Movie>	movies = resDao.getAllMoviesRankBySort(map);
		List<Theater> theaters = theaterDao.getAllTheaters();
		List<String> cities = theaterDao.getAllCities();
		List<CityCount> counts = resDao.getCountCitiesByMovieNo(mno);
		
		
		mav.addAttribute("theaters", theaters);
		mav.addAttribute("cities", cities);
		mav.addAttribute("movies", movies);
		mav.addAttribute("counts", counts);

		return mav;
	}
	
	@RequestMapping("/reservation/movietimetable.jf")
	public ModelAndView movietimetable(HttpServletRequest req, HttpServletResponse res) throws Exception {
		ModelAndView mav = new ModelAndView();
		mav.setViewName("semi/reservation/movietimetable.jsp");
		
		int mno = 0;
		int sort = 0;
		try {
			sort = Integer.parseInt(req.getParameter("sort"));
		} catch(Exception e) {
			sort = 1;
		}
		try {
			mno = Integer.parseInt(req.getParameter("mno"));
			sort = Integer.parseInt(req.getParameter("sort"));
		} catch(Exception e){
			Map<String, Integer> map = new HashMap<String, Integer>();
			map.put("sort", sort);
			Movie movie = resDao.getRank1MovieByOrderBy(map);
			mno = movie.getNo();
		}
		Movie movie = movieDao.getMovieByNo(mno);
		
		String city = req.getParameter("city");
		if(city == null) {
			city = "서울";
		}
		
		Map<String, Integer> map = new HashMap<String, Integer>();
		
		map.put("sort", sort);
		
		List<Movie> movies = resDao.getAllMoviesRankBySort(map);
		List<Theater> theaters = theaterDao.getAllTheaters();
		List<String> cities = theaterDao.getAllCities();
		
		
		mav.addAttribute("theaters", theaters);
		mav.addAttribute("cities", cities);
		mav.addAttribute("movies", movies);
		mav.addAttribute("findMovie", movie);

		return mav;
	}
	
	@RequestMapping("/reservation/theatertimetable.jf")
	public ModelAndView theatertimetable(HttpServletRequest req, HttpServletResponse res) throws Exception {
		String city = req.getParameter("city");
		if(city == null) {
			city = "서울";
		}

		ModelAndView mav = new ModelAndView();
		mav.setViewName("semi/reservation/theatertimetable.jsp?city=" + city);
		
		List<Theater> theaters = theaterDao.getAllTheaters();
		List<String> cities = theaterDao.getAllCities();
		
		
		mav.addAttribute("theaters", theaters);
		mav.addAttribute("cities", cities);
		
		return mav;
	}
	
	@RequestMapping("/reservation/selectmovie.jf")
	public ModelAndView selectMovie(HttpServletRequest req, HttpServletResponse res) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setView(new JSONView());
		
		int mno = Integer.parseInt(req.getParameter("mno"));
		
		
		List<Ticketing> ticketings = resDao.getTicketingsByMovieNo(mno);
		List<CityCount> counts = resDao.getCountCitiesByMovieNo(mno);
		List<String> cities = theaterDao.getAllCities();
		
		mav.addAttribute("counts", counts);
		mav.addAttribute("ticketings", ticketings);
		mav.addAttribute("cities", cities);

		return mav;
	}
	
	@RequestMapping("/reservation/selectcity.jf")
	public ModelAndView selectcity(HttpServletRequest req, HttpServletResponse res) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setView(new JSONView());
		
		int mno = 0;
		try {
			mno = Integer.parseInt(req.getParameter("mno"));
		} catch (Exception e) {
			mno = 1;
		}
		String city = req.getParameter("city");
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("movieNo", mno);
		map.put("theaterCity", city);
		
		List<String> theaters = resDao.getTheaterNameByMnoCity(map);
		
		mav.addAttribute("theaters", theaters);
		
		return mav;
	}
	
	@RequestMapping("/reservation/selecttheater.jf")
	public ModelAndView selecttheater(HttpServletRequest req, HttpServletResponse res) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setView(new JSONView());
		
		int movieNo = Integer.parseInt(req.getParameter("mno"));
		String theaterName = req.getParameter("tname");
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("movieNo", movieNo);
		map.put("theaterName", theaterName);
		
		List<String> dates = resDao.getDatesByMnoTname(map);
		
		mav.addAttribute("dates", dates);
		
		return mav;
	}
	
	@RequestMapping("/reservation/selectdate.jf")
	public ModelAndView selectdate(HttpServletRequest req, HttpServletResponse res) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setView(new JSONView());

		int mno = Integer.parseInt(req.getParameter("mno"));
		String sdate = req.getParameter("sdate");
		String tname = req.getParameter("tname");
		
		Map<String, Object> map = new HashMap<String, Object>();
		
		map.put("movieNo", mno);
		map.put("screeningDate", sdate);
		map.put("theaterName", tname);
		
		List<Ticketing> screenings = resDao.getScreeningsByMDT(map);
		List<Map<String, Object>> counts = resDao.getReservationCount();
		
		mav.addAttribute("screenings", screenings);
		mav.addAttribute("counts", counts);
		
		return mav;
	}
	
	@RequestMapping("/reservation/goreservation.jf")
	public ModelAndView goreservation(HttpServletRequest req, HttpServletResponse res) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setViewName("semi/reservation/successres.jsp");
		
		HttpSession session = req.getSession();
		Member member = (Member) session.getAttribute("LOGINMEMBER");

		String memberId = member.getId();
		int count = 0;
		try {
			count = Integer.parseInt(req.getParameter("count"));
		} catch (Exception e) {
			count = 1;
		}
		int sno = 0;
		try {
			sno = Integer.parseInt(req.getParameter("sno"));
		} catch(Exception e) {
			sno = 0;
		}
		List<Movie> movies = movieDao.getAllMovies();
		
		int movieNo = resDao.getMovieNoBySno(sno);
		int realMembers = 0;
		int finalRealMembers = 0;
		Map<String, Object> map = new HashMap<String, Object>();
		for(int i=0; i<movies.size(); i++) {
			if((i+1) == movieNo) {
				realMembers = resDao.getRealMembersByMno(movieNo);
				finalRealMembers = count + realMembers;
			} else {
				realMembers = resDao.getRealMembersByMno(i+1);
			}
		}
		
		int sumRealMembers = resDao.getSumRealMembers() + count;
		System.out.println("sumRealMembers : " + sumRealMembers);
		double resRate = 0.0;
		for(int i=0; i<movies.size(); i++) {
			if((i+1) == movieNo) {
				resRate = Math.floor(((double)finalRealMembers/sumRealMembers)*100*10)/10.0;
				map.put("count", finalRealMembers);
				map.put("resRate", resRate);
				map.put("movieNo", movieNo);	
				resDao.updateMoviesByMno(map);
			} else {
				realMembers = resDao.getRealMembersByMno(i+1);
				resRate = Math.floor(((double)realMembers/sumRealMembers)*100*10)/10.0;
				map.put("count", realMembers);
				map.put("resRate", resRate);
				map.put("movieNo", i+1);
				resDao.updateMoviesByMno(map);
			}
		}
		
		Reservation reservation = new Reservation();
		reservation.setMemberId(memberId);
		reservation.setScreeningNo(sno);
		reservation.setReservationCount(count);
		System.out.println(memberId);
		System.out.println(sno);
		System.out.println(count);
		
		resDao.insertReservation(reservation);
		
		return mav;
	}
	
	@RequestMapping("/reservation/showttformovie.jf")
	public ModelAndView showttformovie(HttpServletRequest req, HttpServletResponse res) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setView(new JSONView());
		
		int mno = 0;
		int sort = 0;
		try {
			sort = Integer.parseInt(req.getParameter("sort"));
		} catch(Exception e) {
			sort = 1;
		}
		try {
			mno = Integer.parseInt(req.getParameter("mno"));
			sort = Integer.parseInt(req.getParameter("sort"));
		} catch(Exception e){
			Map<String, Integer> map = new HashMap<String, Integer>();
			map.put("sort", sort);
			Movie movie = resDao.getRank1MovieByOrderBy(map);
			mno = movie.getNo();
		}
		
		List<Ticketing> ticketings = resDao.getTicketingsByMovieNo(mno);
		List<String> dates = resDao.getDatesByMno(mno);
		Movie movie = resDao.getMovieInfosByMno(mno);
		
		mav.addAttribute("ticketings", ticketings);
		mav.addAttribute("dates", dates);
		mav.addAttribute("movie", movie);

		return mav;
	}
	
	@RequestMapping("/reservation/showttfordate.jf")
	public ModelAndView showttfordate(HttpServletRequest req, HttpServletResponse res) throws Exception {

		ModelAndView mav = new ModelAndView();
		mav.setView(new JSONView());
		
		int mno = Integer.parseInt(req.getParameter("mno"));
		String sdate = req.getParameter("sdate");
		
		Date date = new Date();
		SimpleDateFormat format1 = new SimpleDateFormat("MM-dd-E");
		String formatDate = format1.format(date);
		System.out.println(formatDate);
		System.out.println(sdate);
		
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("movieNo", mno);
		map.put("screeningDate", sdate);
		map.put("date", formatDate);
		
		List<Ticketing> times = resDao.getScreeningsByMD(map);
		
		mav.addAttribute("times", times);

		return mav;
	}
}
